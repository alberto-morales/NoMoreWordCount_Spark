package eu.albertomorales.scalaSparkIntro.logsProcessor

import org.apache.commons.math3.stat.descriptive.rank.Max;
import org.apache.commons.math3.stat.descriptive.rank.Min;
import org.apache.commons.math3.stat.descriptive.rank.Percentile;

import scala.collection.JavaConverters._
import org.apache.log4j.{Level, Logger, LogManager, PropertyConfigurator}

class RequestStatistics(listaValores : Seq[Double]) {

    private var valoresJ = new java.util.ArrayList[Double]()
    @transient lazy val log = org.apache.log4j.LogManager.getLogger("requestStatisticsLogger")

    def this() {
      this(List())  
    }
    
    def compute(valuesToCompute: Seq[Double]): RequestStatistics = {
       val resultado: RequestStatistics = new RequestStatistics(valuesToCompute ++ listaValores)
       resultado
    }
    
    for (nuevoValor <- listaValores) {
      if (nuevoValor > -1.0) {
        valoresJ.add(nuevoValor)
      }
    }

    val arrayTiempos = valoresJ.asScala.toArray
    private val count = valoresJ.size()
    log.debug("tiene "+count)

		private val percentile90 = new Percentile().evaluate(arrayTiempos, 90);
		private val min = new Min().evaluate(arrayTiempos);
		private val max = new Max().evaluate(arrayTiempos);    
    
  
    override def toString = {
      ""+ count + " " + percentile90 + " " + min + " " + max
    }

}

trait LogHelper {
  lazy val log = Logger.getLogger(this.getClass.getName)
}